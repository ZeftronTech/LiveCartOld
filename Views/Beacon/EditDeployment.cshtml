@model LiveKart.Entities.BeaconDeployment
@{
    ViewBag.Title = "EditDeployment";
    Layout = "~/Views/Shared/_AdminMaster.cshtml";
    List<LiveKart.Entities.Asset> assetss = ViewBag.Assets;
}

<div id="masthead">
    <div class="container">
        <div class="masthead-pad">
            <div class="masthead-text">
                <div class="span4" style="margin: 0;">
                    <h1>
                        Edit Beacon Deployment</h1>
                </div>
            </div>
            <!-- /.masthead-text -->
        </div>
    </div>
</div>

<div id="content">
    <div class="container">
        <div class="row-fluid">
            @using (Html.BeginForm("EditDeployment", "Beacon", FormMethod.Post, new { id = "newBeaconDeployment", @class = "form-horizontal" }))
            {
            
                @Html.HiddenFor(model => model.BeaconDeploymentID)    
                <div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.Beacon.BeaconID, new { @class = "form-label span4" })
                        <div class="row-fluid span4">
								 @Html.DisplayFor(model => model.Beacon.BeaconName)
                                <text> (</text>
                                @Html.DisplayFor(model => model.Beacon.BeaconID)
                                <text>)</text>
                        </div>
                    </div>
                </div>  
                    
               

                <div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.AssetID, new { @class = "form-label span4" })
                        <div class="row-fluid span4">
                            @Html.DropDownListFor(model => model.AssetID, new SelectList(assetss, "AssetID", "AssetName", Model.AssetID), new { @class = "row-fluid" })
                        </div>
                    </div>
                </div>   
               
                                                       
                <div class="row-fluid form-actions">
                    <div class="span12">
                        <input type="submit" value="Update" class="btn btn-large btn-primary btn-edit-pop" />
                        @Html.ActionLink("Cancel", "Deployed", 0, new { @class = "btn btn-large btn-secondary" })
                    </div>
                </div>
                
            }
        </div>
    </div>
</div>
<script language="javascript" type="text/javascript" src="@Url.Content("~/Content/js/plugins/DT_bootstrap.js")"></script>
@section JavaScript {
    <script type="text/javascript">
       
        $(window).load(function () {
            $("#AssetID").prepend("<option value='0'>Select Asset</option>").val('0');
            $("#BeaconID > option").each(function () {
                this.text = this.text + ' (' + this.value + ')';
                            });


            $('#newBeaconDeployment').submit(function () {
                if ($(this).validate().form()) {
                    $('body').showLoading();
                    $.ajax({
                        url: this.action,
                        type: this.method,
                        data: $(this).serialize(),
                        success: function (result) {
                            if (result.Status == "Ok") {
                                showNotification({ message: result.Message, type: "success", autoClose: true, duration: 4 });
                                setTimeout(function () {
                                    window.location = result.ReturnUrl;
                                }, 800);
                            }
                            else {
                                $('body').hideLoading();
                                showNotification({ message: result.Message, type: "warning", autoClose: true, duration: 4 });
                            }
                        },
                        error: function (result) {
                            $('body').hideLoading();
                            showNotification({ message: result.Message, type: "error", autoClose: true, duration: 4 });
                        }
                    });
                }
                return false;
            });
        });
    </script>
}