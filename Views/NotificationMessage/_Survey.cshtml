@using LiveKart.Entities
@model NotificationMessage

@{
NotificationMessage notificationMessage = Model;
string thumbSrc = notificationMessage.MessageThumbImage ?? "/Content/notificationimages/img-placeholder.png";
}

@Html.HiddenFor(m => notificationMessage.SurveyId)
@Html.HiddenFor(m => notificationMessage.SurveyMessage.SurveyId)
@{
    if (notificationMessage.SurveyMessage == null)
    {
        notificationMessage.SurveyMessage = new SurveyMessage();
        if (notificationMessage.SurveyMessage.Questions == null)
        {
            notificationMessage.SurveyMessage.Questions = new List<SurveyQuestion>();
        }
    }
}
<div class="form-row row-fluid">
    <div class="span12">
        <div class="switch" style="width: 200px">
            <input type="radio" class="switch-input" name="answers" value="1"
                   id="Survey" checked="checked" />
            <label for="Survey" class="switch-label switch-label-off">
                Survey overview</label>
            <input type="radio" class="switch-input" name="answers" value="0"
                   id="Answers">
            <label for="Answers" class="switch-label switch-label-on">
                Answers</label>
            <span class="switch-selection"></span>
        </div>
        <br />
    </div>
</div>
<div id="survey">
    <h2>Survey Message Content</h2>
    <br />
    <div class="span12" style="width: 100%; margin-left: 0px;">
        <div class="row-fluid">
            <label class="form-label span3">Notification Header</label>
            <div class="span9">
                @Html.TextBoxFor(m => notificationMessage.SurveyMessage.MessageHeader, new { @class = "span9" })
                @Html.ValidationMessageFor(m => notificationMessage.SurveyMessage.MessageHeader)
                <p>Visible to the mobile app user.</p>
            </div>
        </div>
        <div class="row-fluid">
            <label class="form-label span3">Notification Short Description</label>
            <div class="span9">
                @Html.TextAreaFor(m => notificationMessage.SurveyMessage.MessageShortDescription, new { @class = "span9", maxlength=100 })
                @Html.ValidationMessageFor(m => notificationMessage.SurveyMessage.MessageShortDescription)
                <p>Visible to mobile app user. Please do not enter more than 100 characters.</p>
            </div>
        </div>
        <div class="row-fluid">
            <label class="form-label span3">Notification Image(thumbnail image)</label>
            <div class="span9">
                @Html.TextBoxFor(m => notificationMessage.MessageThumbImage, new {style = "display: none"})
                <input type="file" id="notificationMessage_MessageThumbImageFile" style="display: none;"/>
                <div class="span9">
                    <div class="span6 offset3">
                        <img class="NotificationImage thumb" id="notificationMessage_MessageThumbImageImg" src="@thumbSrc" />
                        <i class="icon-large icon-pencil editImageIcon"></i>
                        <i class="icon-large icon-trash deleteImageIcon"></i>
                    </div>
                </div>
            </div>
        </div>
        <hr />
        <div class="row-fluid">
            <label class="form-label span3">Survey Full Description</label>
            <div class="span9">
                @Html.TextAreaFor( m => notificationMessage.SurveyMessage.MessageDescription, new { @class = "span9", maxlength=300})
                @Html.ValidationMessageFor(m => notificationMessage.SurveyMessage.MessageDescription)
                <p>Visible to mobile app user. Please do not enter more than 300 characters.</p>
            </div>
        </div>
        <br/>
        <div class="btn-group btn-group-vertical span3">
            <label>Add a new question:</label>
            <button class="btn" id="multipleChoiseBtn">Multiple Choice</button>
            <button class="btn" id="singleTextboxBtn">Single Textbox</button>
            <button class="btn" id="commentBoxBtn">Comment Box</button>
        </div>
        <div class="span8" id="questionsContainer">
            @for (var i = 0; i < notificationMessage.SurveyMessage.Questions.Count; i++ )
            {
                var question = notificationMessage.SurveyMessage.Questions[i];
                var isAnswered = ViewBag.Answers == null ? "" : 
                    ((IEnumerable<SurveyUserAnswer>) ViewBag.Answers).Any(a => a.QuestionId == question.QuestionId) ? "isAnswered" : "";
                if (question.QuestionType == (byte)Enums.SurveyQuestionType.SingleChoise ||
                    question.QuestionType == (byte)Enums.SurveyQuestionType.MultipleChoise)
                {
                    <div id="multipleChoiseTemplate" class="surveyQuestion multipleChoise">
                        <div class="span12">
                            <div class="row-fluid">
                                <label class="span3">Question</label>
                                @Html.TextBoxFor(m => notificationMessage.SurveyMessage.Questions[i].Question,  isAnswered != "" ? 
                                    (object)new { @class = "span8 question " + isAnswered, @readonly = "readonly"} :
                                    (object)new { @class = "span8 question " + isAnswered})
                                @Html.HiddenFor(m => notificationMessage.SurveyMessage.Questions[i].SurveyId, new{@class = "questionSurveyIdHidden"})
                                @Html.HiddenFor(m => notificationMessage.SurveyMessage.Questions[i].QuestionId, new{@class = "questionQuestionIdHidden"})
                                @Html.HiddenFor(m => notificationMessage.SurveyMessage.Questions[i].QuestionType, new{@class = "questionQuestionTypeHidden"})
                                <i class="icon-large icon-trash questionDelete"></i>
                            </div>
                            @for (var j = 0; j < notificationMessage.SurveyMessage.Questions[i].Answers.Count; j++)
                            {
                                <div class="row-fluid">
                                    <label class="span3 optionLabel">Option @(j+1)</label>
                                    @Html.TextBoxFor(m => notificationMessage.SurveyMessage.Questions[i].Answers[j].Answer,isAnswered != "" ? 
                                    (object)new { @class = "span8 option", @readonly = "readonly"} :
                                    (object)new { @class = "span8 option"})
                                    @Html.HiddenFor(m => notificationMessage.SurveyMessage.Questions[i].Answers[j].AnswerId, new{@class = "answerAnswerIdHidden"})
                                    @Html.HiddenFor(m => notificationMessage.SurveyMessage.Questions[i].Answers[j].QuestionId, new{@class = "answerQuestionIdHidden"})
                                    @if (j == notificationMessage.SurveyMessage.Questions[i].Answers.Count - 1)
                                    {
                                        <i class="icon-large icon-plus-sign optionAdd"></i>
                                    }
                                    <i class="icon-large icon-trash optionDelete"></i>
                                </div>
                            }
                            <div class="row-fluid">
                                <div class="span3"></div>
                                <div class="span9">
                                    <label>@Html.CheckBox("isMultiSelect", question.QuestionType == (byte)Enums.SurveyQuestionType.MultipleChoise, isAnswered != "" ?
                                    (object)new {@class="isMultiSelect", @disabled="disabled"} :
                                    (object)new {@class="isMultiSelect"}) 
                                        Allow more than one answer for this question. Use checkboxes</label>
                                </div>
                            </div>
                        </div>
                    </div>
                
                }
                else if (question.QuestionType == (byte) Enums.SurveyQuestionType.CommentBox)
                {
                    <div id="commentBoxTemplate" class="surveyQuestion commentBox">
                        <div class="span12">
                            <div class="row-fluid">
                                <label class="span3">Question</label>
                                @Html.TextBoxFor(m => notificationMessage.SurveyMessage.Questions[i].Question, isAnswered != "" ? 
                                    (object)new { @class = "span8 question " + isAnswered, @readonly = "readonly"} :
                                    (object)new { @class = "span8 question " + isAnswered})
                                @Html.HiddenFor(m => notificationMessage.SurveyMessage.Questions[i].SurveyId, new{@class = "questionSurveyIdHidden"})
                                @Html.HiddenFor(m => notificationMessage.SurveyMessage.Questions[i].QuestionId, new{@class = "questionQuestionIdHidden"})
                                @Html.HiddenFor(m => notificationMessage.SurveyMessage.Questions[i].QuestionType, new{@class = "questionQuestionTypeHidden"})
                                <i class="icon-large icon-trash questionDelete"></i>
                            </div>
                            <div class="row-fluid">
                                <label class="span3">Answer</label>
                                <textarea class="span8" disabled="disabled" placeholder="Comment Box"></textarea>
                            </div>
                        </div>
                    </div>
                }
                else if (question.QuestionType == (byte) Enums.SurveyQuestionType.SingleTextBox)
                {
                    <div id="singleTextboxTemplate" class="surveyQuestion singleTextbox">
                        <div class="span12">
                            <div class="row-fluid">
                                <label class="span3">Question</label>
                                @Html.TextBoxFor(m=> notificationMessage.SurveyMessage.Questions[i].Question, isAnswered != "" ? 
                                    (object)new { @class = "span8 question " + isAnswered, @readonly = "readonly"} :
                                    (object)new { @class = "span8 question " + isAnswered})
                                @Html.HiddenFor(m => notificationMessage.SurveyMessage.Questions[i].SurveyId, new{@class = "questionSurveyIdHidden"})
                                @Html.HiddenFor(m => notificationMessage.SurveyMessage.Questions[i].QuestionId, new{@class = "questionQuestionIdHidden"})
                                @Html.HiddenFor(m => notificationMessage.SurveyMessage.Questions[i].QuestionType, new{@class = "questionQuestionTypeHidden"})
                                <i class="icon-large icon-trash questionDelete"></i>
                            </div>
                            <div class="row-fluid">
                                <label class="span3">Answer</label>
                                <input type="text" disabled="disabled" placeholder="Single Textbox" class="span8"/>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
        <div id="questionTemplates" style="display: none">
            <div id="multipleChoiseTemplate" class="surveyQuestion multipleChoise">
                <div class="span12">
                    <div class="row-fluid">
                        <label class="span3">Question</label>
                        @Html.TextBox("question", null, new {@class = "span8 question", qType="0"})
                        <input type="hidden" class="questionQuestionTypeHidden" value="0"/>
                        <input type="hidden" class="questionSurveyIdHidden"/>
                        <input type="hidden" class="questionQuestionIdHidden"/>
                        <i class="icon-large icon-trash questionDelete"></i>
                    </div>
                    <div class="row-fluid">
                        <label class="span3 optionLabel">Option 1</label>
                        @Html.TextBox("answer1", null, new {@class = "span8 option"})
                        <input type="hidden" class="questionSurveyIdHidden"/>
                        <input type="hidden" class="questionQuestionIdHidden"/>
                        <input type="hidden" class="questionQuestionTypeHidden"/>
                        <i class="icon-large icon-plus-sign optionAdd" style="display: none"></i> 
                        <i class="icon-large icon-trash optionDelete"></i>
                    </div>
                    <div class="row-fluid">
                        <label class="span3 optionLabel">Option 2</label>
                        @Html.TextBox("answer2", null, new {@class = "span8 option"})
                        <input type="hidden" class="questionSurveyIdHidden"/>
                        <input type="hidden" class="questionQuestionIdHidden"/>
                        <input type="hidden" class="questionQuestionTypeHidden"/>
                        <i class="icon-large icon-plus-sign optionAdd"></i> 
                        <i class="icon-large icon-trash optionDelete"></i>
                    </div>
                    <div class="row-fluid">
                        <div class="span3"></div>
                        <div class="span9">
                            <label>@Html.CheckBox("isMultiSelect", false, new {@class="isMultiselect"}) Allow more than one answer for this question. Use checkboxes</label>
                        </div>
                    </div>
                </div>
            </div>
            <div id="singleTextboxTemplate" class="surveyQuestion singleTextbox">
                <div class="span12">
                    <div class="row-fluid">
                        <label class="span3">Question</label>
                        @Html.TextBox("question", null  ,new {@class = "span8 question"})
                        <input type="hidden" class="questionSurveyIdHidden"/>
                        <input type="hidden" class="questionQuestionIdHidden"/>
                        <input type="hidden" class="questionQuestionTypeHidden" value="2"/>
                        <i class="icon-large icon-trash questionDelete"></i>
                    </div>
                    <div class="row-fluid">
                        <label class="span3">Answer</label>
                        <input type="text" disabled="disabled" placeholder="Single Textbox" class="span8"/>
                    </div>
                </div>
            </div>
            <div id="commentBoxTemplate" class="surveyQuestion commentBox">
                <div class="span12">
                    <div class="row-fluid">
                        <label class="span3">Question</label>
                        @Html.TextBox("question", null,  new {@class = "span8 question"})
                        <input type="hidden" class="questionSurveyIdHidden"/>
                        <input type="hidden" class="questionQuestionIdHidden"/>
                        <input type="hidden" class="questionQuestionTypeHidden" value="3"/>
                        <i class="icon-large icon-trash questionDelete"></i>
                    </div>
                    <div class="row-fluid">
                        <label class="span3">Answer</label>
                        <textarea class="span8" disabled="disabled" placeholder="Comment Box"></textarea>
                    </div>
                </div>
            </div>
        </div>
        <br />
        <div class="row-fluid NotificationsTabButtons span12"  style="margin-bottom: 20px; margin-left: 0px;">
            <input type="submit" value="@ViewBag.ActionText" class="btn btn-large btn-primary SubmitBtn" id="SubmitBtn" />
            <input type="submit" value="Cancel" class="btn btn-large CancelBtn" id="CancelBtn" />
        </div>
    </div>
    <div class="modal fade" id="questionDeleteConfirm" style="display: none">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
          </div>
          <div class="modal-body">
              <p>This question was already answered. Are you sure you want to delete it?</p>
              <p>Note, all answers will be deleted too</p>
          </div>
            <div class="modal-footer">
                <input type="hidden" id="dleteQuestionId"/>
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary">Yes, delete it</button>
            </div>
        </div><!-- /.modal-content -->
      </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->
</div>
<div id="answers" style="display: none; overflow-x: scroll">
    @if (ViewBag.Questions != null)
    {
        <table class="responsive table table-striped table-bordered dTable3">
            <thead>
                <tr>
                    @foreach (SurveyQuestion question in ViewBag.Questions)
                    {
                        var comment = question.QuestionType == 1 ? "(more than one answer is possible)" : "";
                        <th class="no-sort" style="min-width: 160px;">@question.Question @comment</th>
                        
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var user in ViewBag.UserRecords)
                {
                    <tr>
                        @foreach (SurveyQuestion question in ViewBag.Questions)
                        {
                            <td>@{
                                    var result = "n\\a";
                                    if (question.Answers.Count > 0)
                                    {
                                        var answers = ((List<SurveyUserAnswer>) ViewBag.Answers).Where(a => a.RecordId == user && a.QuestionId == question.QuestionId).ToList();
                                        if (answers.Count > 0)
                                        {
                                            result = String.Join(", ", question.Answers.Where(a => answers.Select(ans => ans.SelectedAnswerId).Contains(a.AnswerId)).Select(a => a.Answer).ToArray());
                                        }

                                    }
                                    else
                                    {
                                        var answer = ((List<SurveyUserAnswer>) ViewBag.Answers).FirstOrDefault(a => a.RecordId == user && a.QuestionId == question.QuestionId);
                                        if (answer != null)
                                        {
                                            result = answer.Answer;
                                        }
                                    }
                                    @result
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
<script>
    $(function () {
        LiveKart.attachFileUploader("notificationMessage_MessageThumbImage", ".tab-content");
        LiveKart.attachEventHandlers();
        
        $('[name="answers"]').change(function (e) {
            if ($(e.target).attr('id') == 'Answers') {
                $('#answers').show();
                $('#survey').hide();
            } else {
                $('#answers').hide();
                $('#survey').show();
            }
        });

        $('.btn-group .btn').click(function (e) {
            e.preventDefault();
            var buttonId = $(e.target).attr('id');
            var qType = "";
            switch (buttonId) {
                case "multipleChoiseBtn":
                    qType = 'multipleChoise';
                    break;
                case "singleTextboxBtn":
                    qType = 'singleTextbox';
                    break;
                case "commentBoxBtn":
                    qType = 'commentBox';
                    break;
            }
            var markup = $('#' + qType + 'Template');
            var cloned = $(markup).clone(true);
            $('.question,.option,.questionQuestionIdHidden,.answerAnswerIdHidden,.answerQuestionIdHidden,.isMultiselect', cloned)
                .val('').prop('readonly', false).prop('disabled', false).trigger('change');
            $('.error', cloned).remove();
            while ($('.option', cloned).length > 2) {
                var options = $('.option', cloned);
                $(options[options.length - 1]).closest('.row-fluid').remove();
            }
            $('#questionsContainer').prepend(cloned);

            updateOptions($(cloned).closest('.surveyQuestion'));
            updateQuestionNames();
            addValidatetionForQuestion();
        });

        //removing question
        $('.surveyQuestion .questionDelete').click(function (e) {
            var questionContainer = $(e.target).closest('.surveyQuestion');
            if ($('.question', questionContainer).hasClass('isAnswered')) {
                LiveKart.DeletingQuestion = questionContainer;
                $('#questionDeleteConfirm').modal('show');
                return false;
            } else {

                questionContainer.remove();
                updateQuestionNames();
            }
        });

        $('#questionDeleteConfirm  .btn-primary').click(function() {
            LiveKart.DeletingQuestion.remove();
            delete LiveKart.DeletingQuestion;
            updateQuestionNames();
            $('#questionDeleteConfirm').modal('hide');
        });
        
        //adding answer option
        $('.surveyQuestion .icon-plus-sign').click(function (e) {
            var currentOption = $(e.target).closest('.row-fluid');
            var currentQuestion = currentOption.closest('.surveyQuestion');
            if($('.question', currentQuestion).hasClass('isAnswered')) { return false;}
            $(currentOption).after($(currentOption).clone(true));
            
            $('.option', currentQuestion).last().val('');
            $('.answerAnswerIdHidden', currentQuestion).last().val('');
            updateOptions(currentQuestion);
        });
        //deleting answer option
        $('.surveyQuestion .optionDelete').click(function (e) {
            var question = $(e.target).closest('.surveyQuestion');
            if ($('.question', question).hasClass('isAnswered')) { return false; }
            if ($('.option', question).length < 3) {
                showNotification({
                    message: "You should have at least two options with answers for the multiple choice question",
                    type: "error", autoClose: true, duration: 4
                });
                return false;
            }
            $(e.target).closest('.row-fluid').remove();
            updateOptions(question);
        });

        //toggle question type select/multiselect
        $('.isMultiselect').change(function (e) {
            $(e.target).closest('.surveyQuestion')
                .find('.questionQuestionTypeHidden')
                .val($(e.target).prop('checked') ? 1 : 0);
        });

        //hides all add icons except last; renames labels; sets correct options names
        function updateOptions(question) {
            $('.optionAdd', question).hide();
            $('.optionAdd', question).last().show();
            var questionName = $('.question', question).attr('name').slice(0, -8);
            _.each($('.option', question), function (item, i) {
                $(item).attr('name', questionName + 'Answers[' + i + '].Answer');
            });
            _.each($('.optionLabel', question), function (item, i) {
                $(item).text("Option " + (i + 1));
            });
            _.each($('.answerAnswerIdHidden', question), function (item, i) {
                $(item).attr('name', questionName + 'Answers[' + i + '].AnswerId');
            });
            _.each($('.answerQuestionIdHidden', question), function (item, i) {
                $(item).attr('name', questionName + 'Answers[' + i + '].QuestionId');
            });
            //TODO: Replace loops above with one
        };
        
        function updateQuestionNames() {
            _.each($('#questionsContainer .surveyQuestion'), function (q, i) {
                $('.question', q).attr('name', 'notificationMessage.SurveyMessage.Questions[' + i + '].Question');
                $('.questionSurveyIdHidden', q).attr('name', 'notificationMessage.SurveyMessage.Questions[' + i + '].SurveyId');
                $('.questionQuestionIdHidden', q).attr('name', 'notificationMessage.SurveyMessage.Questions[' + i + '].QuestionId');
                $('.questionQuestionTypeHidden', q).attr('name', 'notificationMessage.SurveyMessage.Questions[' + i + '].QuestionType');
                updateOptions(q);
            });
        }
        
        $("[name='notificationMessage.SurveyMessage.MessageHeader']").rules("add", {
            maxlength: 100,
            messages: {
                maxlength: "Seems too long!"
            }
        });
        $("[name='notificationMessage.SurveyMessage.MessageShortDescription']").rules("add", {
            maxlength: 100,
            messages: {
                maxlength: "Seems too long!"
            }
        });
        $("[name='notificationMessage.SurveyMessage.MessageDescription']").rules("add", {
            maxlength: 300,
            messages: {
                maxlength: "Seems too long!"
            }
        });

        function addValidatetionForQuestion() {
            $(".question").rules("add", {
                required: true,
                maxlength: 200,
                messages: {
                    required: "Survey question can not be empty",
                    maxlength: "Seems too long!"
                }
            });
            $(".option").rules("add", {
                required: true,
                maxlength: 100,
                messages: {
                    required: "Survey answer can not be empty",
                    maxlength: "Seems too long!"
                }
            });
        }

        $('#frmNotificationTab').submit(function (e) {
            var questions = $('#questionsContainer .surveyQuestion');
            if (!questions.length) {
                e.preventDefault();
                showNotification({ message: "Survey should contain at least one question", type: "error", autoClose: true, duration: 4 });
            }
        });
    });
</script>