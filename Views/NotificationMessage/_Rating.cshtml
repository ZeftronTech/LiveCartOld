@using LiveKart.Entities
@model LiveKart.Entities.NotificationMessage

@{
    NotificationMessage notificationMessage = Model;
    string thumbSrc = notificationMessage.MessageThumbImage ?? "/Content/notificationimages/img-placeholder.png";
}
@Html.HiddenFor(m => notificationMessage.RatingMessage.RatingMessageId)
@Html.HiddenFor(m => notificationMessage.ProductRatingId)
<div class="form-row row-fluid">
    <div class="span12">
        <div class="switch" style="width: 200px">
            <input type="radio" class="switch-input" name="answers" value="1"
                   id="ProductReview" checked="checked" />
            <label for="ProductReview" class="switch-label switch-label-off">
                Product Rating</label>
            <input type="radio" class="switch-input" name="answers" value="0"
                id="Answers">
            <label for="Answers" class="switch-label switch-label-on">
                Answers</label>
            <span class="switch-selection"></span>
        </div>
        <br />
    </div>
</div>
<div id="review">
    <h2>Product Rating Content</h2>
    <br />
    <div class="span12" style="width: 100%; margin-left: 0px;">
        <div class="row-fluid">
            <label class="form-label span3">Notification Header</label>
            <div class="span9">
                @Html.TextBoxFor(m => notificationMessage.RatingMessage.MessageHeader, new { @class = "span9" })
                @Html.ValidationMessageFor(m => notificationMessage.RatingMessage.MessageHeader)
                <p>Visible to the mobile app user.</p>
            </div>
        </div>
        <div class="row-fluid">
            <label class="form-label span3">Notification Short Description</label>
            <div class="span9">
                @Html.TextAreaFor(m => notificationMessage.RatingMessage.MessageShortDescription, new { @class = "span9", maxlength=100 })
                @Html.ValidationMessageFor(m => notificationMessage.RatingMessage.MessageShortDescription)
                <p>Visible to mobile app user. Please do not enter more than 100 characters.</p>
            </div>
        </div>
        <div class="row-fluid">
            <label class="form-label span3">Notification Image(thumbnail image)</label>
            <div class="span9">
                @Html.TextBoxFor(m => notificationMessage.MessageThumbImage, new { style = "display: none"})
                <input type="file" id="notificationMessage_MessageThumbImageFile" style="display: none;"/>
                <div class="span9">
                    <div class="span6 offset3">
                        <img id="notificationMessage_MessageThumbImageImg" class="NotificationImage thumb" src="@thumbSrc" />
                        <i class="icon-large icon-pencil editImageIcon"></i>
                        <i class="icon-large icon-trash deleteImageIcon"></i>
                    </div>
                </div>
            </div>
        </div>
        <hr />
        <div class="row-fluid">
            <label class="form-label span3">Product Rating Image(full screen image)</label>
            <div class="span9">
                @Html.TextBoxFor(m => notificationMessage.RatingMessage.MessageImage, new {style = "display: none" })
                <input type="file" id="notificationMessage_RatingMessage_MessageImageFile" style="display: none;"/>
                <div class="span9">
                    <div class="span6 offset3">
                        @{
                            string stmImgSrc = notificationMessage.RatingMessage.MessageImage ?? "/Content/notificationimages/img-placeholder.png";
                        }
                        <img id="notificationMessage_RatingMessage_MessageImageImg" class="NotificationImage full" src="@stmImgSrc" />
                        <i class="icon-large icon-pencil editImageIcon"></i>
                        <i class="icon-large icon-trash deleteImageIcon"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="row-fluid">
            <label class="form-label span3">Product Rating Full Description</label>
            <div class="span9">
                @Html.TextAreaFor(m => notificationMessage.RatingMessage.MessageDescription, new { @class = "span9", maxlength=300 })
                @Html.ValidationMessageFor(m => notificationMessage.RatingMessage.MessageDescription)
                <p>Visible to mobile app user. Please do not enter more than 300 characters.</p>
            </div>
        </div>
        <div class="row-fluid">
            <label class="form-label span3">Product Rating Entry Fields</label>
            <div class="span9">
                <div>
                    <div class="span9 ratingItemContainer">
                        @for (int i = 0; i < notificationMessage.RatingMessage.RatingItems.Count; i++ )
                        {
                            <div class="row-fluid ratingItem">
                                <label class="span2 option">Option @{
                                                                var optionNum = i + 1; 
                                                                <text>@optionNum</text>
                                                             }
                                </label>
                                @Html.TextBoxFor(m => notificationMessage.RatingMessage.RatingItems[i].ItemName, new {@class="span9 itemName"})
                                @Html.HiddenFor(m=> notificationMessage.RatingMessage.RatingItems[i].RatingItemId, new {@class="itemId"})
                                @Html.HiddenFor(m => notificationMessage.RatingMessage.RatingItems[i].RatingMessageId, new {@class="messageId"})
                                <i class="icon-large icon-trash itemDelete"></i>
                                <i class="icon-large icon-plus-sign itemAdd"></i>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div id="ratingItemTemplate" style="display: none">
            <div class="row-fluid ratingItem">
                <label class="span2 option">Option <%=data.Num + 1%></label>
                <input type="text" name="notificationMessage.RatingMessage.RatingItems[<%=data.Num%>].ItemName" class="span9 itemName"/>
                <input type="hidden" name="notificationMessage.RatingMessage.RatingItems[<%=data.Num%>].RatingItemId" value="0" class="itemId"/>
                <input type="hidden" name="notificationMessage.RatingMessage.RatingItems[<%=data.Num%>].RatingMessageId" value="<%=data.RatingMessageId%>" class="messageId" />
                <i class="icon-large icon-trash itemDelete"></i>
                <i class="icon-large icon-plus-sign itemAdd"></i>
            </div>
        </div>
        <br />
        <div class="row-fluid NotificationsTabButtons" style="margin-bottom: 20px;">
            <input type="submit" value="@ViewBag.ActionText" class="btn btn-large btn-primary SubmitBtn" id="SubmitBtn" />
            <input type="submit" value="Cancel" class="btn btn-large CancelBtn" id="CancelBtn" />
        </div>
    </div>
</div>
<div id="answers" style="display: none">
    @if (ViewBag.Items != null)
    {
        <table class="responsive table table-striped table-bordered dTable2">
            <thead>
                <tr>
                    @foreach (RatingItem item in ViewBag.Items)
                    {
                        <th class="no-sort">@item.ItemName</th>
                    }
                </tr>
            </thead>
            <tbody>
                @{ var starMarkup = "<i class='icon-star icon-large'/>"; }
                @foreach (var user in ViewBag.Users)
                {
                    <tr>
                        @foreach (RatingItem item in ViewBag.Items)
                        {
                            <td>@{
                                    var answer = ((List<UserRatingItem>) ViewBag.Answers).FirstOrDefault(a => a.UserId == user && a.RatingItemId == item.RatingItemId);
                                    var result = "n\a";
                                    if (answer != null)
                                    {
                                        for (int i = 0; i < answer.Mark; i++)
                                        {
                                            <i class="icon-star icon-large"></i>
                                        }
                                    }
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
<script>
    $(function () {
        LiveKart.attachEventHandlers();
        LiveKart.attachFileUploader("notificationMessage_MessageThumbImage", ".tab-content");
        LiveKart.attachFileUploader("notificationMessage_RatingMessage_MessageImage", ".tab-content");
        $('.entryFields input[type="checkbox"]').change(function(e) {
            var name = $(e.target).attr('name');
            $('[name="' + name + '"][type="hidden"]').val($(e.target).prop('checked'));
        });
        
        $('.CancelBtn').click(function (e) {
            e.preventDefault();
            $('#ratingMessage').empty();
            $('#editMessageForm').hide();
            $('#notificationList').show();
        });

        $('[name="answers"]').change(function(e) {
            if ($(e.target).attr('id') =='Answers') {
                $('#answers').show();
                $('#review').hide();
            } else {
                $('#answers').hide();
                $('#review').show();
            }
        });
        

        function attachAddRemoveItemEvents() {
            $('.itemDelete, .itemAdd').unbind('click');
            $('.itemDelete').click(function (e) {
                if ($('.ratingItemContainer .ratingItem').length == 1) {
                    showNotification({ message: "Product rating should contain at least one option", type: "error", autoClose: true, duration: 4 });
                    return false;
                }
                $(e.target).closest('.ratingItem').remove();
                updateOptions();
            });
            
            function updateOptions() {
                _.each($('.ratingItemContainer .ratingItem'), function(item, index) {
                    $('.option', item).text("Option " + (index + 1));
                    $('.itemName', item).attr('name', 'notificationMessage.RatingMessage.RatingItems[' + index + '].ItemName');
                    $('.itemId', item).attr('name', 'notificationMessage.RatingMessage.RatingItems[' + index + '].RatingItemId');
                    $('.messageId', item).attr('name', 'notificationMessage.RatingMessage.RatingItems[' + index + '].RatingMessageId');
                });
                updateAddIcons();
            }

            updateAddIcons();
            function updateAddIcons() {
                $('.ratingItemContainer .ratingItem .itemAdd').hide();
                $('.ratingItemContainer .ratingItem .itemAdd:last').show();
            }

            $('.itemAdd').click(function() {
                var itemsCount = $('.ratingItemContainer .ratingItem').length;
                var messageId = $('#notificationMessage_RatingMessage_RatingMessageId').val();
                var template = $('#ratingItemTemplate').html().replace(/&lt;/g, '<').replace(/&gt;/g, '>');
                var compiledTemplate = _.template(template);
                $('.ratingItemContainer').append(compiledTemplate({ data: { Num: itemsCount, RatingMessageId: messageId } }));
                $('.ratingItemContainer .itemName').last().focus();
                attachAddRemoveItemEvents();
            });
        }
        attachAddRemoveItemEvents();
        
        $(".itemName").rules("add", {
            required: true,
            messages: {
                required: "Product rating should contain at least one option."
            }
        });
        $("[name='notificationMessage.RatingMessage.MessageHeader']").rules("add", {
            maxlength: 100,
            messages: {
                maxlength: "Seems too long!"
            }
        });
        $("[name='notificationMessage.RatingMessage.MessageShortDescription']").rules("add", {
            maxlength: 100,
            messages: {
                maxlength: "Seems too long!"
            }
        });
        $("[name='notificationMessage.RatingMessage.MessageDescription']").rules("add", {
            maxlength: 300,
            messages: {
                maxlength: "Seems too long!"
            }
        });


    })
</script>
