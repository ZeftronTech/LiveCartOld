@model LiveKart.Entities.Company
@{
    ViewBag.Title = "Company";
    Layout = "~/Views/Shared/_AdminMaster.cshtml";
}
<!-- /.container -->
<div id="content">
    <div class="container">
        <div class="row-fluid" id="formContainer">
            @using (Html.BeginForm("EditCompany", "Profile", FormMethod.Post, new { id = "editCompany", @class = "form-horizontal" }))
            {
                @Html.HiddenFor(model => model.CompanyId)
                @Html.HiddenFor(model => model.Active)  
                        
                  <div class="span7 offset1"> 
                <div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.CompanyName, new { @class = "form-label span4" })
                        <div class="row-fluid span6">
                            @Html.TextBoxFor(model => model.CompanyName, new { required = "", @class = "row-fluid" })
                        </div>
                    </div>
                </div>  
                    
                <div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.ContactPerson, new { @class = "form-label span4" })
                        <div class="row-fluid span6">
                            @Html.TextBoxFor(model => model.ContactPerson, new { @class = "row-fluid" })
                        </div>
                    </div>
                </div>  
                    
                <div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.Email, new { @class = "form-label span4" })
                        <div class="row-fluid span6">
                            @Html.TextBoxFor(model => model.Email, new { @class = "row-fluid" })
                        </div>
                    </div>
                </div> 
                    
            
                <div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.Address1, new { @class = "form-label span4" })
                        <div class="row-fluid span6">
                            @Html.TextBoxFor(model => model.Address1, new { @class = "row-fluid" })
                        </div>
                    </div>
                </div>

                <div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.Address2, new { @class = "form-label span4" })
                        <div class="row-fluid span6">
                            @Html.TextBoxFor(model => model.Address2, new { @class = "row-fluid" })
                        </div>
                    </div>
                </div>
                <div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.City, new { @class = "form-label span4" })
                        <div class="row-fluid span6">
                            @Html.TextBoxFor(model => model.City, new { @class = "row-fluid" })
                        </div>
                    </div>
                </div>
                <div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.State, new { @class = "form-label span4" })
                        <div class="row-fluid span6">
                            @Html.TextBoxFor(model => model.State, new { @class = "row-fluid" })
                        </div>
                    </div>
                </div>
                    
                <div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.CountryID, new { @class = "form-label span4" })
                        <div class="row-fluid span6">
                            @Html.DropDownListFor(model => model.CountryID, Enumerable.Empty<SelectListItem>(), new Dictionary<string, object> { { "data-placeholder", "Select country" }, { "class", "row-fluid" } })
                        </div>
                    </div>
                </div>

                    

                <div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.Zip, new { @class = "form-label span4" })
                        <div class="row-fluid span6">
                            @Html.TextBoxFor(model => model.Zip, new { @class = "row-fluid" })
                        </div>
                    </div>
                </div>
                <div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.Phone, new { @class = "form-label span4" })
                        <div class="row-fluid span6">
                            @Html.TextBoxFor(model => model.Phone, new { @class = "row-fluid" })
                        </div>
                    </div>
                </div>
                </div>
                
                <div class="span4">
                 <div class="form-row row-fluid">
                    <div class="span12">                 
                                  
                            <div class="input2">
                            
                            <div class="uploadedImage">
                            </div>
                                    @Html.HiddenFor(model => model.Image)
                                    
                                    </div>
                                    <div class="file-btn">
                                    <span>Upload Image</span>
                                    <input type="file" id="fileinput" name="fileinput" />
                                    </div>
                                                    </div>
                </div>  </div>
                @*<div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.VuforiaServerAccessKey, new { @class = "form-label span4" })
                        <div class="row-fluid span4">
                            @Html.TextBoxFor(model => model.VuforiaServerAccessKey, new { @class = "row-fluid" })
                        </div>
                    </div>
                </div>
                
                <div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.VuforiaServerSecretKey, new { @class = "form-label span4" })
                        <div class="row-fluid span4">
                            @Html.TextBoxFor(model => model.VuforiaServerSecretKey, new { @class = "row-fluid" })
                        </div>
                    </div>
                </div>
                
                <div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.VuforiaClientAccessKey, new { @class = "form-label span4" })
                        <div class="row-fluid span4">
                            @Html.TextBoxFor(model => model.VuforiaClientAccessKey, new { @class = "row-fluid" })
                        </div>
                    </div>
                </div>
                
                <div class="form-row row-fluid">
                    <div class="span12">
                        @Html.LabelFor(model => model.VuforiaClientSecretKey, new { @class = "form-label span4" })
                        <div class="row-fluid span4">
                            @Html.TextBoxFor(model => model.VuforiaClientSecretKey, new { @class = "row-fluid" })
                        </div>
                    </div>
                </div>*@
                
             
                <div class="clearfix"></div>              
                <div class="row-fluid form-actions">
                    <div class="span9 offset3">
                        <a href="@ViewBag.ReturnUrl" class="btn btn-large btn-secondary">Cancel</a>
                        <input type="submit" value="Update" class="btn btn-large btn-primary" />
                    </div>
                </div>
                
            }
        </div>
    </div>
</div>
@section JavaScript {
    <script type="text/javascript">
	$(".uploadedImage").html('<img src="' + $("#Image").val() + '"/>')
	var companymodel = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
	$(function () {
		$('#fileinput').change(function () {
			var formData = new FormData();
			var file = document.getElementById("fileinput");
			formData.append('file', file.files[0]);
			formData.append('Image', $("#Theme").val());

			$.ajax({
				url: '@Url.Action("UploadImage")' + '/?userType=company',
				type: "POST",
				data: formData,
				processData: false,
				contentType: false,
				success: function (result) {
					if (result.Status == "Ok") {
						$(".uploadedImage").html('<img src="' + result.ReturnUrl + '"/>');
						$("#Image").val(result.ReturnUrl);
					}
					else {
						$('body').hideLoading();
						showNotification({ message: result.Message, type: "warning", autoClose: true, duration: 4 });
					}
				},
				error: function (result) {
					$('body').hideLoading();
					showNotification({ message: result.Message, type: "error", autoClose: true, duration: 4 });
				}
			});
		});
	});


	$(window).load(function () {

		// validate signup form on keyup and submit
		$("#editCompany").validate({
			rules: {
				CompanyName: { required: true, maxlength: 100 },
				ContactPerson: { required: true, maxlength: 50 },
				Email: { required: true, maxlength: 50},
				Password: { required: true, maxlength: 15},
				Address1: { required: true, maxlength: 250 },
				Address2: { maxlength: 250 },
				CountryID: { required: true, maxlength: 50},
				State: { required: true, maxlength: 50 },
				City: { required: true, maxlength: 50 },
				Zip: { required: true, maxlength: 10, digits: true },
				Phone: { maxlength: 15, digits: true },
			},
			messages: {
				CompanyName: { required: "Required!", maxlength: "Seems too long." },
				ContactPerson: { required: "Required!", maxlength: "Seems too long." },
				Email: { required: "Required!", maxlength: "Seems too long.", Email: "Invalid email!" },
				Password: { required: "Required!", maxlength: "Seems too long!" },
				Address1: { required: "Required!", maxlength: "Seems too long." },
				Address2: "Seems too long.",
				CountryID:  { required: "Required!", maxlength: "Seems too long!" },
				State: { required: "Required!", maxlength: "Seems too long!" },
				City: { required: "Required!", maxlength: "Seems too long!" },
				Zip: { required: "Required!", maxlength: "Seems too long.", digits: "Invalid zipcode!" },
				Phone: { maxlength: "Seems too long.", digits: "Invalid phone number!" },
			}
		});


		//Bind countries
		$('#CountryID').showLoading();
		$.getJSON('/api/country/all', function (countries) {
			var countrySelect = $('#CountryID');
			countrySelect.empty();
			countrySelect.append(
			$('<option/>')
				.attr('value', '0')
				.text('Select country')
			);
			$.each(countries, function (index, country) {
				countrySelect.append(
				$('<option/>')
					.attr('value', country.countryID)
					.text(country.countryName)
				);
			});
			debugger;
			countrySelect.val(companymodel.CountryID); // .trigger("liszt:updated");;;
			$('#CountryID').hideLoading();
		});
		$('#editCompany').submit(function () {
			if ($(this).validate().form()) {
				$('#content').showLoading();
				$.ajax({
					url: this.action,
					type: this.method,
					data: $(this).serialize(),
					complete:function(){
						$('#content').hideLoading();
					},
					success: function (result) {
						if (result.Status == "Ok") {
							showNotification({ message: result.Message, type: "success", autoClose: true, duration: 4 });
							setTimeout(function () {
								//window.location = result.ReturnUrl;
								window.location = '@ViewBag.ReturnUrl';
							}, 400);
						}
						else {
							showNotification({ message: result.Message, type: "warning", autoClose: true, duration: 4 });
						}
					},
					error: function (result) {
						showNotification({ message: result.Message, type: "error",  autoClose: true, duration: 4 });
					}
				});
			}
			return false;
		});
	});
    </script>
}
