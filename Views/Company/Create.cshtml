@model LiveKart.Entities.Company
@{
	ViewBag.Title = "Create";
	Layout = "~/Views/Shared/_AdminMaster.cshtml";
}
<div id="masthead">
	<div class="container">
		<div class="masthead-pad">
			<div class="masthead-text">
				<div class="span4" style="margin: 0;">
					<h1>
						CreateCompany
					</h1>
				</div>
			</div>
			<!-- /.masthead-text -->
		</div>
	</div>
</div>
<!-- /.container -->
<div id="content">
	<div class="container">
		<div class="row-fluid">
			@using (Html.BeginForm("Create", "Company", FormMethod.Post, new { id = "newCompany", @class = "form-horizontal" }))
			{


				<div class="form-row row-fluid">
					<div class="span12">
						@Html.LabelFor(model => model.CompanyName, new { @class = "form-label span4" })
						<div class="row-fluid span4">
							@Html.TextBoxFor(model => model.CompanyName, new { required = "", @class = "row-fluid" })
						</div>
					</div>
				</div>

				<div class="form-row row-fluid">
					<div class="span12">
						@Html.LabelFor(model => model.ContactPerson, new { @class = "form-label span4" })
						<div class="row-fluid span4">
							@Html.TextBoxFor(model => model.ContactPerson, new { @class = "row-fluid" })
						</div>
					</div>
				</div>

				<div class="form-row row-fluid">
					<div class="span12">
						@Html.LabelFor(model => model.Email, new { @class = "form-label span4" })
						<div class="row-fluid span4">
							@Html.TextBoxFor(model => model.Email, new { @class = "row-fluid" })
						</div>
					</div>
				</div>


				<div class="form-row row-fluid">
					<div class="span12">
						@Html.LabelFor(model => model.Address1, new { @class = "form-label span4" })
						<div class="row-fluid span4">
							@Html.TextBoxFor(model => model.Address1, new { @class = "row-fluid" })
						</div>
					</div>
				</div>

				<div class="form-row row-fluid">
					<div class="span12">
						@Html.LabelFor(model => model.Address2, new { @class = "form-label span4" })
						<div class="row-fluid span4">
							@Html.TextBoxFor(model => model.Address2, new { @class = "row-fluid" })
						</div>
					</div>
				</div>
				<div class="form-row row-fluid">
					<div class="span12">
						@Html.LabelFor(model => model.City, new { @class = "form-label span4" })
						<div class="row-fluid span4">
							@Html.TextBoxFor(model => model.City, new { @class = "row-fluid" })
						</div>
					</div>
				</div>
				<div class="form-row row-fluid">
					<div class="span12">
						@Html.LabelFor(model => model.State, new { @class = "form-label span4" })
						<div class="row-fluid span4">
							@Html.TextBoxFor(model => model.State, new { @class = "row-fluid" })
						</div>
					</div>
				</div>

				<div class="form-row row-fluid">
					<div class="span12">
						@Html.LabelFor(model => model.CountryID, new { @class = "form-label span4" })
						<div class="row-fluid span4">
							@Html.DropDownListFor(model => model.CountryID, Enumerable.Empty<SelectListItem>(), new Dictionary<string, object> { { "data-placeholder", "Select country" }, { "class", "row-fluid" } })
						</div>
					</div>
				</div>



				<div class="form-row row-fluid">
					<div class="span12">
						@Html.LabelFor(model => model.Zip, new { @class = "form-label span4" })
						<div class="row-fluid span4">
							@Html.TextBoxFor(model => model.Zip, new { @class = "row-fluid" })
						</div>
					</div>
				</div>
				<div class="form-row row-fluid">
					<div class="span12">
						@Html.LabelFor(model => model.Phone, new { @class = "form-label span4" })
						<div class="row-fluid span4">
							@Html.TextBoxFor(model => model.Phone, new { @class = "row-fluid" })
						</div>
					</div>
				</div>


				<div class="form-row row-fluid">
					<div class="span12">
						@Html.LabelFor(model => model.UserName, new { @class = "form-label span4" })
						<div class="row-fluid span4">
							@Html.TextBoxFor(model => model.UserName, new { @class = "row-fluid" })
						</div>
					</div>
				</div>

				<div class="form-row row-fluid">
					<div class="span12">
						@Html.LabelFor(model => model.Password, new { @class = "form-label span4" })
						<div class="row-fluid span4">
							@Html.PasswordFor(model => model.Password, new { @class = "row-fluid" })
						</div>
					</div>
				</div>

				<div class="form-row row-fluid">
					<div class="span12">
						<div class="row-fluid">
							@Html.LabelFor(model => model.Image, new { @class = "form-label span4" })
							<div class="span3">
								<input type="file" id="fileinput" name="fileinput" />
							</div>
							<div class="uploadedImage span2">
							</div>
							@Html.HiddenFor(model => model.Image)
						</div>
					</div>
				</div>

				<div class="row-fluid form-actions">
					<div class="span12">
						<input type="submit" value="Create" class="btn btn-large btn-primary" />
						@Html.ActionLink("Cancel", "Index", 0, new { @class = "btn btn-large btn-secondary" })
					</div>
				</div>

			}
		</div>
	</div>
</div>
<script type="text/javascript" src="@Url.Content("~/Content/js/plugins/jquery.uniform.min.js")"> </script>
@section JavaScript {
	<script type="text/javascript">
		$(function () {
			$('#fileinput').change(function () {

				var formData = new FormData();
				var file = document.getElementById("fileinput");
				formData.append('file', file.files[0]);
				formData.append('Image', $("#Image").val());
				$('#content').showLoading();
				$.ajax({
					url: '@Url.Action("UploadImage")',
					type: "POST",
					data: formData,
					processData: false,
					contentType: false,
					complete: function () {
						$('#content').hideLoading();
					},
					success: function (result) {
						if (result.Status == "Ok") {
							$(".uploadedImage").html('<img src="' + result.ReturnUrl + '" style="height:35px;width:35px;"/>');
							$("#Image").val(result.ReturnUrl);
						}
						else {
							showNotification({ message: result.Message, type: "warning", autoClose: true, duration: 4 });
						}
					},
					error: function (result) {
						showNotification({ message: result.Message, type: "error", autoClose: true, duration: 4 });
					}
				});
			});
		});


		$(window).load(function () {
			// validate signup form on keyup and submit
			$("#newCompany").validate({
				rules: {
					CompanyName: { required: true, maxlength: 100 },
					ContactPerson: { required: true, maxlength: 50 },
					Email: { required: true, maxlength: 50, email: true },
					UserName: { required: true, maxlength: 50 },
					Password: { required: true, maxlength: 20 },
					Password: { required: true, maxlength: 15 },
					Address1: { required: true, maxlength: 250 },
					Address2: { maxlength: 250 },
					CountryID: { required: true, min: 1 },
					State: { required: true, maxlength: 50 },
					City: { required: true, maxlength: 50 },
					Zip: { required: true, maxlength: 10, digits: true },
					Phone: { maxlength: 15, digits: true }//,
					//                    VuforiaServerAccessKey: { required: true },
					//                    VuforiaServerSecretKey: { required: true },
					//                    VuforiaClientAccessKey: { required: true },
					//                    VuforiaClientSecretKey: { required: true }

				},
				messages: {
					CompanyName: { required: "Required!", maxlength: "Seems too long." },
					ContactPerson: { required: "Required!", maxlength: "Seems too long." },
					Email: { required: "Required!", maxlength: "Seems too long.", email: "Invalid email!" },
					UserName: { required: "Required!", maxlength: "Seems too long." },
					Password: { required: "Required!", maxlength: "Seems too long." },
					Password: { required: "Required!", maxlength: "Seems too long!" },
					Address1: { required: "Required!", maxlength: "Seems too long." },
					Address2: "Seems too long.",
					CountryID: "Required!",
					State: { required: "Required!", maxlength: "Seems too long!" },
					City: { required: "Required!", maxlength: "Seems too long!" },
					Zip: { required: "Required!", maxlength: "Seems too long.", digits: "Invalid zipcode!" },
					Phone: { maxlength: "Seems too long.", digits: "Invalid phone number!" }//,
					//                    VuforiaServerAccessKey: "Required!",
					//                    VuforiaServerSecretKey: "Required!",
					//                    VuforiaClientAccessKey: "Required!",
					//                    VuforiaClientSecretKey: "Required!"

				}
			});
			//Bind countries
			$('#CountryID').showLoading();
			$.getJSON('/api/country/all', function (countries) {
				var countrySelect = $('#CountryID');
				countrySelect.empty();
				countrySelect.append(
                $('<option/>')
                    .attr('value', '0')
                    .text('Select country')
                );
				$.each(countries, function (index, country) {
					countrySelect.append(
						$('<option/>')
                        .attr('value', country.countryID)
                        .text(country.countryName)
                    );
				});
				$('#CountryID').hideLoading();
			});
			$('#newCompany').submit(function () {
				if ($(this).validate().form()) {
					$('body').showLoading();
					$.ajax({
						url: this.action,
						type: this.method,
						data: $(this).serialize(),
						success: function (result) {
							if (result.Status == "Ok") {
								showNotification({ message: result.Message, type: "success", autoClose: true, duration: 4 });
								setTimeout(function () {
									window.location = result.ReturnUrl;
								}, 300);
							}
							else {
								$('body').hideLoading();
								showNotification({ message: result.Message, type: "warning", autoClose: true, duration: 4 });
							}
						},
						error: function (result) {
							$('body').hideLoading();
							showNotification({ message: result.Message, type: "error", autoClose: true, duration: 4 });
						}
					});
				}
				return false;
			});
		});
	</script>
}
